#include "../include/manager.h"
#include <sstream>
#include <fstream>
#include <stdlib.h>
#include <assert.h>
#include <algorithm>

using namespace std;

Manager::Manager(
  board_ptr_t mainBoard, const vector<player_ptr_t> &players, display_ptr_t mainDisplay)
  : mainBoard(mainBoard), mainDisplay(mainDisplay),
    players(players), currPlayer(0), dice{make_shared<Dice>()} {

  // set every tile to be an observer of dice
  for (auto t : mainBoard->getTiles())
    dice->attach(t);
}


// returns false if eof or parse to num fails
bool readInt(istream &in, int &out) {
  string s;
  if (!(in >> s)) return false;
  stringstream ss{s};
  if (!(ss >> out)) {
    cout << "corrupted board file" << endl;
    return false;
  }

  return true;
}


std::vector<pair<int,int>> Manager::generateBoardData(istream &in) {
  vector<pair<int,int>> data;
  // read one line
  string s;
  getline(in, s);
  istringstream iss{s};

  // populate data from in until you can no longer read ints
  while (true) {
    pair<int, int> p;
    // read in the two numbers
    if (!readInt(iss, p.first)) break;
    if (!readInt(iss, p.second)) break;
    // std::cout << p.first << "," << p.second << '\n';
    data.push_back(p);
  }

  return data;
}

// converts board save string to vector of pairs and initializes board
void Manager::loadBoard(const std::string &file) {
  std::cout << "Loading board from file: " << file << '\n';
  // open file
  ifstream boardFile{file};

  // if file was found, init board with contents of boardFile
  if (boardFile) {
    // initialize board
    boardInfo = generateBoardData(boardFile);
    mainBoard->init(boardInfo);
  } else {
    // TODO: make this an error later
    std::cout << "can't find board file" << '\n';
  }
}

// sets up the state of players, manager and board from saved file
// TODO: strong guarantee
void Manager::loadGame(const std::string &file) {
  std::cout << "Loading previously saved game." << '\n';
  // open file
  ifstream saveFile{file};

  // load game if file was found, otherwise abort
  if (saveFile) {
    string s;

    /* First line is current turn, [0,3]
     * next four lines are each player data (resources, goals, and criteria)
     * next line is board string
     * last line is the geese tile,, [0,18]
     */

     // current turn
     saveFile >> s;
     currPlayer = stoi(s);

     // each player data
     for (player_ptr_t p : players) {
       // populating resources
       for (auto &resource : {"CAFFEINE", "LAB", "LECTURE", "STUDY", "TUTORIAL"}) {
         saveFile >> s;
         p->setResource(resource, stoi(s));
       }

       // goals
       saveFile >> s;
       assert(s == "g"); // make sure reading correctly
       // read numbers until a "c"
       while (true) {
         saveFile >> s;
         if (s == "c") break;

         // add goal for each number
         achieveGoal(stoi(s), p); // NOTE: wont work since it adds  to current player
       }

       // criteria - read until end of line
       getline(saveFile, s);
       istringstream ss{s};
       int n;
       while (ss >> n) {
         int m;
         ss >> m;
         completeCriterion(n, p);
         for (; m > 1; m--) { // improve the critera m times
           improveCriterion(n);
         }
       }
     }

     // read in the board and initialize board
     boardInfo = generateBoardData(saveFile);
     mainBoard->init(boardInfo);

     // geese - does nothing
     saveFile >> s;


  } else {
    std::cout << "can't find save file" << '\n';
  }
}

int selectRand(vector<int> &nums) {
  int index = rand() % nums.size();
  int ret = nums.at(index);
  nums.erase(nums.begin() + index);
  return ret;
}

void Manager::createRandom() {
  /*
  LEGEND

  Resources:
  3 tutorial (id 4)
  3 study (id 3)
  4 caffeine (id 0)
  4 lab (id 1)
  4 lecture (id 2)
  1 netflix (id 5)

  Dice values:
  one 2 one 12
  two 3,4,5,6 two 8,9,10,11*/


  // // for any pair <a, b>, a is the resource and b is its value
  // vector<pair<int, int>> boardData;

  // vector that stores all the possible resources, see legend
  // emplace four 0s, four 1s, four 2s
  vector<int> resources{};
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      resources.emplace_back(i);
    }
  }
  // emplace three 3s, three 4s
  for (int i = 3; i < 5; i++) {
    for (int j = 0; j < 3; j++) {
      resources.emplace_back(i);
    }
  }

  vector<int> values{};
  values.emplace_back(2);
  values.emplace_back(12);
  for (int i = 3; i < 12; i++) {
    if (i == 7) continue;
    values.emplace_back(i);
    values.emplace_back(i);
  }

  for (int i = 0; i < 18; i++) {
    boardInfo.emplace_back(selectRand(resources), selectRand(values));
  }

  pair<int, int> netflix(5, 7);
  // random number between 0 and 18
  int index = rand() % 18;
  // insert netflix at a random index
  boardInfo.insert(boardInfo.begin() + index, netflix);

  /*for (auto i:boardInfo) {
    cout << i.first << ' ' << i.second << ' ';
  }
  cout << endl;*/
  mainBoard->init(boardInfo);
}

// updates player's die to be loaded, and updates dice's roll value
void Manager::setLoadedDie(int value) {
  players.at(currPlayer)->setDice(DICE::LOADED);
  dice->setLoaded(value);
}
// updates player's die to be fair
void Manager::setFairDie() {
  players.at(currPlayer)->setDice(DICE::FAIR);
}
// rolls a die based on what the player's dice is
void Manager::roll() {
  if (currentPlayer()->getDice() == DICE::FAIR)
    dice->rollFair();
  else if (currentPlayer()->getDice() == DICE::LOADED)
    dice->rollLoaded();
}

string Manager::getRollStatus() const {
  // check if any player earned resource in this roll
  bool playerGainedRes = false;
  for (auto p : players) {
    if (p->gainedResource()) {
      playerGainedRes = true;
      break;
    }
  }

  stringstream ss;

  // if someone did, print out recently gained resources of players
  // that gained resources
  if (playerGainedRes) {
    for (auto p : players)
      if (p->gainedResource()) {
<<<<<<< HEAD
        cout << "Student " << p->getColour() << " gained:" << '\n';
=======
        ss << "Student " << p->colour() << " gained:" << '\n';
>>>>>>> 685dbf6f9b3e9f03061bb223a4fff0845ca93f7f
        for (auto &kv : p->getGainedResources())
          if (kv.second)
            ss << kv.second << " " << kv.first << endl;
      }
  } else {
    ss << "No students gained resources." << '\n';
  }

  return ss.str();
}

// calls draw on display with the board
void Manager::printBoard() {
  mainDisplay->draw(*mainBoard);
}

void Manager::achieveGoal(int loc, player_ptr_t p) {
  if (!p) p = players[currPlayer];

  // If location is invalid or it's already built on, you cannot build
  bool canBuild = true;
  if ((!mainBoard.isValidGoal(loc, p->getColour())) || 
    (mainBoard.getEdgeAt(loc).set)) {
    canBuild = false;
  }
  // Otherwise try to build, but check if player can afford to
  if (canBuild) {
    if (p->canAfford("GOAL")) {
      mainBoard->achieveGoal(loc, p->getColour());
      p->buyGoal(loc);
    } else {
      throw "You do not have enough resources.";
    }
  } else {
    throw "You cannot build here.";
  }

  // std::cout << "currentPlayer owns goals:" << '\n';
  // for (auto g : players[currPlayer]->getOwnedGoals()) std::cout << g << '\n';
}

void Manager::completeCriterion(int loc, player_ptr_t p) {
  if (!p) p = players[currPlayer];
  
  // If location is invalid or it's already built on, you cannot build
  bool canBuild = true;
  if ((!mainBoard.isValidCriteria(loc, p)) || 
    (mainBoard.getVertexAt(loc).type != "NONE")) {
    canBuild = false;
  }
  // Otherwise try to build, but check if player can afford to
  if (canBuild) {
    if (p->canAfford("ASSIGNMENT")) {
      mainBoard->completeCriterion(loc, p);
      p->addCriterion(loc);
    } else {
      throw "You do not have enough resources.";
    }
  } else {
    throw "You cannot build here.";
  }
}

void Manager::completeInitialCriterion(int loc, player_ptr_t p) {
  if (!p) p = players[currPlayer];
  mainBoard->completeInitialCriterion(loc, p);
  p->addCriterion(loc);
}

void Manager::improveCriterion(int loc) {
  // If location is not built on, or a final, you can't improve
  bool canBuild = true;
  if ((mainBoard.getVertexAt(loc).type == "NONE") || 
    (mainBoard.getVertexAt(loc).type == "FINAL")) {
    canBuild = false;
  }
  string type = mainBoard.getVertexAt(loc).type == "ASSIGNMENT" ? 
  "MIDTERM" : "FINAL";
  // Otherwise try to build, but check if player can afford to
  if (canBuild) {
    if (p->canAfford(type)) {
      mainBoard->improveCriterion(loc);
      p->buyImprovement(type);
    } else {
      throw "You do not have enough resources.";
    }
  } else {
    throw "You cannot build here.";
  }
}

void Manager::trade(const string &p2, const string &give, const string &take) {

}

void Manager::moveGeese(int loc) {
  mainBoard->moveGeese(loc);
}

void Manager::next() {
  currPlayer++;
  currPlayer %= players.size();
  // reset all players for the next turn
  for (auto p : players) p->resetGains();
}

void Manager::saveGame(const std::string &filename) {
  std::cout << "saving game..." << '\n';

  ofstream saveFile{filename};

  // current turn
  saveFile << currPlayer << '\n';

  // each player data
  for (player_ptr_t p : players) {

    // writing resources
    for (auto &resource : {"CAFFEINE", "LAB", "LECTURE", "STUDY", "TUTORIAL"}) {
      saveFile << p->numberOf(resource) << " ";
    }

    // goals
    saveFile << "g ";

    // write goal numbers
    for (int goal : p->getOwnedGoals())
      saveFile << goal << " ";

    saveFile << "c";

    // write each criteria number followed by level of improvements
    for (int c : p->getOwnedCriteria())
      saveFile << " " << c << " " << mainBoard->getVertexAt(c).type;

    saveFile << '\n';
  }

  // board data
  for (size_t i = 0; i < boardInfo.size(); i++) {
    if (i != 0) saveFile << " ";
    saveFile << boardInfo[i].first << " " << boardInfo[i].second;
  }

  // geese
  saveFile << '\n' << 0 << '\n';
}



void Manager::setDisplay(display_ptr_t display) {
  mainDisplay = display;
}
const player_ptr_t Manager::currentPlayer() const {
  return players.at(currPlayer);
}

// returns status of p
string Manager::getStatus(const player_ptr_t p) const {
  return p->getColour() + " has <numvp> victory points, "
    + to_string(p->numberOf("CAFFEINE")) + " caffeines, "
    + to_string(p->numberOf("LAB")) + " labs, "
    + to_string(p->numberOf("LECTURE")) + " lectures, "
    + to_string(p->numberOf("TUTORIAL")) + " tutorials, and "
    + to_string(p->numberOf("STUDY")) + " studies.";
}
// returns status of current player
string Manager::getCurPlayerStatus() const {
  return getStatus(players[currPlayer]);
}
// returns status of all players
std::string Manager::getAllStatuses() const {
  string ret = "";
  for (player_ptr_t p : players) {
    ret += getStatus(p) + "\n";
  }
  return ret;
}

string Manager::getCriteria() const {
  const auto p = currentPlayer();
  string ret = p->getColour() + " has completed:\n";
  for (int critNum : p->getOwnedCriteria()) {
    ret += to_string(critNum) + " " + to_string(mainBoard->getVertexAt(critNum).type) + '\n';
  }
  return ret;
}
